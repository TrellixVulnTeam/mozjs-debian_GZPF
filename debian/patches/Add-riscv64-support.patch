From: William Grant <wgrant@ubuntu.com>
Date: Tue, 14 Apr 2020 10:18:28 +1000
Subject: Add riscv64 support

Bug-Debian: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=932893
---
 build/moz.configure/init.configure                     | 3 +++
 js/src/jit/AtomicOperations.h                          | 3 ++-
 js/src/jit/shared/AtomicOperations-feeling-lucky-gcc.h | 5 +++++
 mfbt/tests/TestPoisonArea.cpp                          | 3 +++
 python/mozbuild/mozbuild/configure/constants.py        | 2 ++
 5 files changed, 15 insertions(+), 1 deletion(-)

diff --git a/build/moz.configure/init.configure b/build/moz.configure/init.configure
index 5e07418..b790c93 100644
--- a/build/moz.configure/init.configure
+++ b/build/moz.configure/init.configure
@@ -744,6 +744,9 @@ def split_triplet(triplet, allow_msvc=False):
     elif cpu == 'sh4':
         canonical_cpu = 'sh4'
         endianness = 'little'
+    elif cpu == 'riscv64':
+        canonical_cpu = 'riscv64'
+        endianness = 'little'
     else:
         raise ValueError('Unknown CPU type: %s' % cpu)
 
diff --git a/js/src/jit/AtomicOperations.h b/js/src/jit/AtomicOperations.h
index 0486cba..d00e276 100644
--- a/js/src/jit/AtomicOperations.h
+++ b/js/src/jit/AtomicOperations.h
@@ -391,7 +391,8 @@ inline bool AtomicOperations::isLockfreeJS(int32_t size) {
 #elif defined(__ppc__) || defined(__PPC__) || defined(__sparc__) ||     \
     defined(__ppc64__) || defined(__PPC64__) || defined(__ppc64le__) || \
     defined(__PPC64LE__) || defined(__alpha__) || defined(__hppa__) ||  \
-    defined(__sh__) || defined(__s390__) || defined(__s390x__)
+    defined(__sh__) || defined(__s390__) || defined(__s390x__) ||       \
+    defined(__riscv)
 #  include "jit/shared/AtomicOperations-feeling-lucky.h"
 #else
 #  error "No AtomicOperations support provided for this platform"
diff --git a/js/src/jit/shared/AtomicOperations-feeling-lucky-gcc.h b/js/src/jit/shared/AtomicOperations-feeling-lucky-gcc.h
index f002cd4..413591a 100644
--- a/js/src/jit/shared/AtomicOperations-feeling-lucky-gcc.h
+++ b/js/src/jit/shared/AtomicOperations-feeling-lucky-gcc.h
@@ -70,6 +70,11 @@
 #  endif
 #endif
 
+#if defined(__riscv) && __riscv_xlen == 64
+#  define HAS_64BIT_ATOMICS
+#  define HAS_64BIT_LOCKFREE
+#endif
+
 #ifdef JS_CODEGEN_NONE
 #  ifdef JS_64BIT
 #    define HAS_64BIT_ATOMICS
diff --git a/mfbt/tests/TestPoisonArea.cpp b/mfbt/tests/TestPoisonArea.cpp
index fbd3364..0a67e8c 100644
--- a/mfbt/tests/TestPoisonArea.cpp
+++ b/mfbt/tests/TestPoisonArea.cpp
@@ -169,6 +169,9 @@ static const ia64_instr _return_instr = {
 #  define RETURN_INSTR _return_instr
 #  define RETURN_INSTR_TYPE ia64_instr
 
+#elif defined(__riscv)
+#define RETURN_INSTR 0x80828082 /* ret; ret */
+
 #else
 #  error "Need return instruction for this architecture"
 #endif
diff --git a/python/mozbuild/mozbuild/configure/constants.py b/python/mozbuild/mozbuild/configure/constants.py
index 7542dcd..c9dd1bb 100644
--- a/python/mozbuild/mozbuild/configure/constants.py
+++ b/python/mozbuild/mozbuild/configure/constants.py
@@ -49,6 +49,7 @@ CPU_bitness = {
     'mips64': 64,
     'ppc': 32,
     'ppc64': 64,
+    'riscv64': 64,
     's390': 32,
     's390x': 64,
     'sh4': 32,
@@ -88,6 +89,7 @@ CPU_preprocessor_checks = OrderedDict((
     ('mips64', '__mips64'),
     ('mips32', '__mips__'),
     ('sh4', '__sh__'),
+    ('riscv64', '__riscv && __riscv_xlen == 64'),
 ))
 
 assert sorted(CPU_preprocessor_checks.keys()) == sorted(CPU.POSSIBLE_VALUES)
